{
 cells [
  {
   cell_type markdown,
   metadata {},
   source [
    ## Application of Differentiation Newton's Method
   ]
  },
  {
   cell_type markdown,
   metadata {},
   source [
    pIn this independent work, you are going to implement an application of differentiation Newton's Methodpn,
    n,
    pFor more information, check out the textbook. pn
   ]
  },
  {
   cell_type code,
   execution_count null,
   metadata {},
   outputs [],
   source [
    import sympy as symn,
    import numpy as npn,
    import matplotlib.pyplot as pltn,
    %matplotlib inlinen,
    from sympy.abc import x
   ]
  },
  {
   cell_type markdown,
   metadata {},
   source [
    ## Task 1 Derivativen,
    pWrite a function that takes two inputs f(x) and a value x_0 and returns m the slope of the tangent to the given function at the given point. pn,
    n,
    p For example, your_function(x2+2x+2, 4) should return 10. p
   ]
  },
  {
   cell_type code,
   execution_count null,
   metadata {},
   outputs [],
   source []
  },
  {
   cell_type markdown,
   metadata {},
   source [
    ## Task 2 Tangent Linen,
    n,
    p Write a function that takes a slope m and a point (x_0, y_0) and returns a line passing through the point with the given slope. pn,
    n,
    p For example, your_function(1, (2, 3)) should return x + 1 p
   ]
  },
  {
   cell_type code,
   execution_count null,
   metadata {},
   outputs [],
   source []
  },
  {
   cell_type markdown,
   metadata {},
   source [
    ## Task 3 Root of a Linen,
    n,
    p Write a function that takes a linear function that is returned in the previous task, and returns it's root pn,
    n,
    p For example, your_function(x+1) should return -1 pn,
    n,
    p Be careful Make sure that you have considered those lines without roots p
   ]
  },
  {
   cell_type code,
   execution_count null,
   metadata {},
   outputs [],
   source []
  },
  {
   cell_type markdown,
   metadata {},
   source [
    ## Task 4 Newton's Methodn,
    pImplement Newton's Method that takes a function as an input and returns any root of the function.p
   ]
  },
  {
   cell_type code,
   execution_count null,
   metadata {},
   outputs [],
   source []
  },
  {
   cell_type markdown,
   metadata {},
   source [
    ## Task 5 Visualizationn,
    n,
    p Visualize the procedure as much as possible. p
   ]
  },
  {
   cell_type code,
   execution_count null,
   metadata {},
   outputs [],
   source []
  }
 ],
 metadata {
  kernelspec {
   display_name Python 3 (ipykernel),
   language python,
   name python3
  },
  language_info {
   codemirror_mode {
    name ipython,
    version 3
   },
   file_extension .py,
   mimetype textx-python,
   name python,
   nbconvert_exporter python,
   pygments_lexer ipython3,
   version 3.9.12
  }
 },
 nbformat 4,
 nbformat_minor 4
}